Counting and size
------------------

//List all the Hash maps that contains more than 8 nodes
select h from java.util.HashMap h where h.size > 8

//List the size of every hashmap. It will print them in a list in visualvm
select count(h) from java.util.HashMap h

//Prints the number of hashmap that have a size bigger than 8. It just prints a number
select count(heap.objects('java.util.HashMap'),"it.size>8")

//Print the number of hashmaps that have a size of 1
select count(heap.objects('java.util.HashMap'),"it.size==1")

//For each hash map in the heap it will print a json representation like this { size = 1, count 12 }. 
//If you have a 100 hash maps then it will print a 100 of those json representation. 
//Count is always increment when it finds a hashmap of the same size
var counts = {};
map(heap.objects('java.util.HashMap'),
    function(map){
     counts[map.size] = (counts[map.size] ? counts [map.size] + 1 :1 )
     return { size:map.size, count:counts[map.size]};
    }
);

//This will add up all the hash maps that have the same size and print the size and the count of hashmaps with that size. 
//You can use this in a histogram then.
var counts = {}; 
filter(
    sort(
         map(heap.objects('java.util.HashMap'),
            function(map){
            counts[map.size] = (counts[map.size] ? counts [map.size] + 1 : 1)
            return { size:map.size, count:counts[map.size]};
          })
        ,'rhs.count - lhs.count')
      ,function(item){
          if(counts[item.size]){
           counts[item.size]=false; 
           return true;
          }
          else{
           return false;
          }
       }
     );

//Print the number of hashmaps. Same as above but using the sum function
select sum(
           map(heap.objects('java.util.HashMap'),
                 function(map){
                    return true;
                 }
              )
         );


Reference
-----------
//print all the ancestors of the hashmap. The objects that have references to the hashmap. 
//You can then click on the parent to get more information about it. They will be a links
select map(heap.objects('java.util.HashMap'),
              function(it){
                 var result = '';
                 while( it != null){
                    result += toHtml(it) + "->";
                    it = it.parent;
                 }
                 result += "end";
                 return result + "<br>";
              }
          )

//List all the referrer that have references to the hashmaps
select referrers(h) from java.util.HashMap h 

//List all the referrers to a hashmap of type java.lang.Class
select referrers(h) from java.util.HashMap h where contains(referrers(h),"classof(it).name=='java.lang.Class'")

//List all the hashmaps that have a referrer of type java.lang.Class
select h from java.util.HashMap h where contains(referrers(h),"classof(it).name=='java.lang.Class'")

//list all the hashmaps that do not have java.lang.class as a parent
filter(
       map(heap.objects('java.util.HashMap'),
              function(map){
                  var result = contains(referrers(map),"classof(map)=='java.lang.Class'");
		   if(!result){
                   return {child:map}
                   }
                    return null;
              }
       ),
       "it != null"
)


//Prints the number of objects of type java.lang.Object[] that have references to hashmap 
//and number of objects of type java.lang.Object[] that does not have any reference to hashmap. i
//Arraylist has an internal array Object[]. 
//That has the reference to the hashmap, not ArrayList. 
var counts = {}; 
filter(
       sort(
            map(heap.objects('java.util.HashMap'),
                 function(map){
                    var result = contains(referrers(map),"classof(it).name=='java.lang.Object[]'");
                    counts[result] = (counts[result] ? counts[result] + 1 : 1);  
                    return { referrenced : result , count:counts[result]}
                 }
            ),
            'rhs.count - lhs.count'
       ),
         function(item){
            if(counts[item.referrenced] != "done"){
                counts[item.referrenced] = "done";
                return true;
            }
         }    
)


//This is to find all the hashmaps that are referenced from an arraylist. 
//An array list has an internal array which is the has the reference to the hashmaps.
select h from java.util.HashMap h where contains(referrers(h),"classof(it).name=='java.lang.Object[]'")
